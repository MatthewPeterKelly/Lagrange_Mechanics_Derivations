function writeRollingCartPoleDynamics(f,M)

%This function writes the dynamics file for the double pendulum.

filename = 'rollingCartPoleDynamics';

comments{1} = ['DZ = ' upper(filename) '(T,Z,P)'];
comments{2} = ' ';
comments{3} = 'FUNCTION:  This function computes the dynamics of a rolling';
comments{4} = '    cart-pole, and is designed to be called from ode45.';
comments{5} = ' ';
comments{6}  = 'INPUTS: ';
comments{7}  = '    t = time. Dummy input for ode45. Not used.';
comments{8} = '    z = [4xn] matrix of states.';
comments{9} = '    P = struct of parameters';
comments{10} = 'OUTPUTS: ';
comments{11} = '    dz = [4xn] matrix of state derivatives';
comments{12} = ' ';
comments{13} = 'NOTES:';
comments{14} = ['    This file was automatically generated by ' mfilename]; 

params{1} = {'m1','disk mass'};
params{2} = {'m2','bob mass'};
params{3} = {'I','disk moment of inertia'};
params{4} = {'g ','gravity'};
params{5} = {'l','pendulum length'};
params{6} = {'r','disk radius'};

states{1} = {'phi','link one absolute angle'};
states{2} = {'th','link one angular rate'};
states{3} = {'dphi','link two absolute angle'};
states{4} = {'dth','link two angular rate'};

dstates{1} = {'dphi','derivative of link one absolute angle'};
dstates{2} = {'dth','derivative of link one angular rate'};
dstates{3} = {'ddphi','derivative of link two absolute angle'};
dstates{4} = {'ddth','derivative of link two angular rate'};

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%
%                               write file                                %
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%
fid = fopen([filename '.m'],'w');

fprintf(fid, ['function dz = ' filename '(~,z,P) \n']);

for i=1:length(comments)
    fprintf(fid,['%%' comments{i} '\n']);
end
fprintf(fid,'\n');

for i=1:length(params)
    fprintf(fid,[params{i}{1} ' = P.' params{i}{1} '; %%' params{i}{2} '\n']);
end
fprintf(fid,'\n');

for i=1:length(states)
    fprintf(fid,[states{i}{1} ' = z(' num2str(i) ',:); %%' states{i}{2} '\n']);
end
fprintf(fid,'\n');

for i=1:2;
    fprintf(fid,['f' num2str(i) ' = ' vectorize(char(f(i))) ';\n']);
end
fprintf(fid,'\n');

for i=1:2
    for j=1:2
        fprintf(fid,['M' num2str(i) num2str(j) ' = ' vectorize(char(M(i,j))) ';\n']);
    end
end
fprintf(fid,'\n');

fprintf(fid,'D = M11.*M22 - M12.*M21;\n\n');

fprintf(fid,'ddphi = (f2.*M12 - f1.*M22)./D;\n');
fprintf(fid,'ddth = -(f2.*M11 - f1.*M21)./D;\n');
fprintf(fid,'\n');

fprintf(fid,'dz = [...\n');
for i=1:length(dstates)
    fprintf(fid,['    ' dstates{i}{1} '; %%' dstates{i}{2} '\n']);
end
fprintf(fid,'];\n');

fprintf(fid,'end \n');

fclose(fid);
end


