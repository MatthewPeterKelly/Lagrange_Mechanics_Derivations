function [energy, kinetic, potential] = doublePendulumEnergy(z,P) 
%[ENERGY, KINETIC, POTENTIAL] = DOUBLEPENDULUMENERGY(Z,P)
% 
%FUNCTION:  This function computes the energy of a double
%    pendulum.
%INPUTS: 
%    z = [4xn] matrix of states.
%    P = struct of parameters
%OUTPUTS: 
%    energy = [1xn] vector of total energy
%    kinetic = [1xn] vector of kinetic energy
%    potential = [1xn] vector of potential energy
% 
%NOTES:
%    This file was automatically generated by writeDoublePendulumEnergy.m

m1 = P.m1; %link one mass
m2 = P.m2; %link two mass
g  = P.g ; %gravity
l1 = P.l1; %link one length
l2 = P.l2; %link two length
I1 = P.I1; %link one moment of inertia about its center of mass
I2 = P.I2; %link two moment of inertia about its center of mass
d1 = P.d1; %distance between link one center of mass and parent joint
d2 = P.d2; %distance between link two center of mass and parent joint

th1 = z(1,:); %link one absolute angle
dth1 = z(2,:); %link one angular rate
th2 = z(3,:); %link two absolute angle
dth2 = z(4,:); %link two angular rate

kinetic = (I1.*dth1.^2)./2 + (I2.*dth2.^2)./2 + (m1.*(d1.^2.*dth1.^2.*cos(th1).^2 + d1.^2.*dth1.^2.*sin(th1).^2))./2 + (m2.*((dth1.*l1.*cos(th1) + d2.*dth2.*cos(th2)).^2 + (d2.*dth2.*sin(th2) + dth1.*l1.*sin(th1)).^2))./2;
potential = g.*m2.*(d2.*sin(th2) + l1.*sin(th1)) + d1.*g.*m1.*sin(th1);
energy = potential + kinetic;

end 
